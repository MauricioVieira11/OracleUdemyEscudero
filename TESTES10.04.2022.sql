create tablespace RECURSOS_HUMANOS
DATAFILE 'D:\Data\RH_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

ALTER TABLESPACE RECURSOS_HUMANOS
ADD DATAFILE 'D:\Data\RH_02.DBF'
SIZE 200M AUTOEXTEND
ON NEXT 200M
MAXSIZE 4096M;

SELECT TABLESPACE_NAME, FILE_NAME FROM DBA_DATA_FILES;

--SEQUENCES
    CREATE SEQUENCE SEQ_GERAL
    START WITH 100
    INCREMENT BY 10;
    
    --CRIANDO TABELA NA TABLESPACE
    CREATE TABLE FUNCIONARIOS(
    IDFUNCIONARIO INT PRIMARY KEY,
    NOME VARCHAR2(30)
    )TABLESPACE RECURSOS_HUMANOS;
    
    INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'JOÃO');
        INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'CLARA');
            INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'LILIAN');
        
    SELECT * FROM FUNCIONARIOS;
    DELETE 
    COMMIT;
    
    
--criando tablespace de marketing
create tablespace MARKETING
DATAFILE 'D:\Data\MKT_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

CREATE TABLE CAMPANHAS(
    IDCAMPANHA INT PRIMARY KEY,
    NOME VARCHAR2(30)
    )TABLESPACE MARKETING;
    
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'PRIMAVERA');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'VERÃO');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'INVERNO');

SELECT * FROM CAMPANHAS;


--COLOCANDO A TABLESPACE OFFLINE
ALTER TABLESPACE RECURSOS_HUMANOS OFFLINE;

--APONTAR PARA O DICIONÁRIO DE DADOS
ALTER TABLESPACE RECURSOS_HUMANOS 
RENAME DATAFILE 'D:/Data/RH_01.DBF' TO 'D:/Producao/RH_01.DBF';

ALTER TABLESPACE RECURSOS_HUMANOS 
RENAME DATAFILE 'D:/Data/RH_02.DBF' TO 'D:/Producao/RH_02.DBF';

ALTER TABLESPACE RECURSOS_HUMANOS ONLINE;

SELECT * FROM funcionarios;
SELECT * FROM CAMPANHAS;


creatE table aluno(
IDALUNO INT PRIMARY KEY,
NOME VARCHAR2(30),
EMAIL VARCHAR2(30),
SALARIO NUMBER(10,2)
);

CREATE SEQUENCE SEQ_EXEMPLO; --A SEQUENCE É UM OBJETO LIVRE, NÃO ESTÁ LIGADA SOMENTE A UMA TABELA

INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'JOÃO','JOÃO@GMAIL.COM',1000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'CLARA','CLARA@GMAIL.COM',2000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'CELIA','CELIA@GMAIL.COM',3000.00);

SELECT * FROM ALUNO;

creatE table aluno2(
IDALUNO INT PRIMARY KEY,
NOME VARCHAR2(30),
EMAIL VARCHAR2(30),
SALARIO NUMBER(10,2)
);

INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL, 'JOÃO','JOÃO@GMAIL.COM',1000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL, 'CLARA','CLARA@GMAIL.COM',2000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL, 'CELIA','CELIA@GMAIL.COM',3000.00);

SELECT * FROM ALUNO2;

--PSEUDOCOLUNAS: ROWID E ROWNUM
SELECT ROWID, IDALUNO, NOME, EMAIL FROM ALUNO;

SELECT ROWID, ROWNUM, IDALUNO, NOME, EMAIL FROM ALUNO;

create or replace procedure BONUS(P_IDALUNO ALUNO.IDALUNO%TYPE,P_PERCENT NUMBER)
AS
    BEGIN
        UPDATE ALUNO SET  SALARIO = SALARIO  + (SALARIO *(P_PERCENT/ 100))
        WHERE P_IDALUNO = IDALUNO;  
    END;
    /
    
    SELECT * FROM ALUNO;

CALL BONUS(2,10);


--AS TRIGGER DEVEM TER O TAMANHO MÁXIMO DE 32K  E NÃO EXECUTAM COMANDOS DE DTL-COMMIT, ROLLBACK, SAVEPOINTS

--TREGGER DE VALIDAÇÃO
CREATE OR REPLACE TRIGGER CHECK_SALARIO
BEFORE  INSERT OR UPDATE ON ALUNO
FOR EACH ROW
BEGIN
    IF :NEWSALARIO < 2000 THEN
        RAISE_APPLICATIN_ERROR(-20000, 'VALOR INCORRETO');
        END IF;
END;
/

SHOW ERRORS;

select trigger_name, trigger_body
from user_triggers;

--triggers de eventos
create table AUDITORIA(
DATA_LOGIN DATE,
LOGIN VARCHAR2(30)
);

    CREATE OR REPLACE PROCEDURE LOGPROC IS
    BEGIN
        INSERT INTO AUDITORIA(DATA_LOGIN, LOGIN)
        VALUES (SYSDATE,USER)
    END LOGPROC;    
        /
        
    SELECT SYSDATE  FROM DUAL;

--falha de logon    
create or replace TRIGGER FALHA_LOGON
AFTER SERVERERROR 
ON DATABASE
BEGIN
    IF (IS_SERVERERROR(1017) THEN)
    INSERT INTO AUDITORIA(DATA_LOGIN, LOGIN)
        VALUES (SYSDATE,'ORA-1017');
        END IF;
END FALHA_LOGON;
/

--erro 1004 default username featue not supported
--erro 1005 password nulo
--erro 1045 privilégio insuficiente

create table usuario(
id int,
nome varchar2(30));

create table bkp_user(
id int,
nome varchar2(30));

inserT into usuario values(1,'joão');
insert into usuario values(2,'CLARA');

COMMIT;

SELECT * FROM USUARIO;

CREATE OR REPLACE TRIGGER LOG_USUARIO
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN
    INSERT INTO bkp_user alues
    (:OLD.ID, :OLD.NOME);
END;
/
SELECT * FROM USUARIO;
DELETE FROM usuario WHERE ID = 1;
SELECT * FROM bkp_user;

--OPERAÇÕES COM VIEWS
CREATE TABLE CLIENTE(
IDCLIENTE INT PRIMARY KEY,
NOME VARCHAR2(30),
SEXO CHAR(1));

INSERT INTO CLIENTE VALUES (1007, 'MAFRA','M');

SELECT * FROM CLIENTE;
COMMIT;

CREATE OR REPLACE VIEW V_CLIENTE
AS
    SELECT IDCLIENTE, NOME, SEXO
    FROM
    CLIENTE;
    
INSERT INTO V_CLIENTE VALUES(1008,'CLARA','F');

SELECT * FROM CLIENTE;
SELECT * FROM V_CLIENTE;

CREATE OR REPLACE VIEW V_CLIENTE_RO
AS  
SELECT IDCLIENTE, NOME, SEXO
FROM CLIENTE
WITH READ ONLY; --VIEW SOMENTE DE LEITURA

--VIEW DE JOIN
CREATE OR REPLACE VIEW RELATORIO
AS
SELECT NOME, SEXO, NUMERO
FROM CLIENTE
 INNER JOIN TELEFONE
 ON IDCLIENTE - ID_CLIENTE;
 
--FORCE
CREATE OR REPLACE FORCE VIEW RELATORIO
AS
SELECT NOME, SEXO, NUMERO
FROM CLIENTE
 INNER JOIN TELEFONE
 ON IDCLIENTE - ID_CLIENTE;
 
 -- DEFERRABLE CONSTRAINTS
 CREATE TABLE FUNCIONARIO(
 IDFUNCIONARIO INT CONSTRAINT PK_FUNCIONARIO PRIMARY KEY,
 NOME VARCHAR2(100)
 );
 
 DROP TABLE TELEFONE;
 CREATE TABLE TELEFONE(
 IDTELEFONE INT PRIMARY KEY,
 NUMERO VARCHAR2(10),
 ID_FUNCIONARIO INT);
 
 ALTER TABLE TELEFONE ADD CONSTRAINT FK_TELEFONE
 FOREING KEY(ID_FUNCIONARIO) REFERENCES FUNCIONARIO;
 
 INSERT INTO FUNCIONARIO ALUES(1,'MAURICIO');
 INSERT INTO TELEFONEE VALUES(10,'34245423',1);
 
 --A CONSTRAINT DE INTEGRIDADE REFERENCIAL  FK CHECA A INTEGRIDADE LOGO APÓS O COMANDO DE DML
 --INSERT / DELETE / UPDATE - NÃO POSSIBILITAM  ASSIM A INSERÇÃO DE REGISTROS SEM REFERENCAI
 
 SELECT CONSTAINT_NAME, DEFERRABLE,  DEFERRED
 FROM USER_CONSTRAINT WHERE TABLE_NAME IN ('FUNCIONARIO','TELEFONE');
 
 
 --APAGANDO A CONSTRAINT
 ALTER TABLE TELEFONE DROP CONSTRAINT FK_TELEFONE;
 
 --RECRIANDO A CONSTRAINT
 ALTER TABLE TELEFONE ADD CONSTRAINT FK_TELEFONE
 FOREING KEY(ID_FUNCIONARIO) REFERENCES FUNCIONARIO
 DEFERRABLE;
 
 SELECT CONSTAINT_NAME, DEFERRABLE AS ATRASADA,  DEFERRED AS VERIFICAÇÃO
 FROM USER_CONSTRAINT WHERE TABLE_NAME IN ('FUNCIONARIO','TELEFONE');
 
 INSERT INTO TELEFONE VALUES (4,'2345563',10);
 
 --MUDANDO PARA A DTL
 SET CONSTRAINTS ALL DEFERRED;
 
 
    